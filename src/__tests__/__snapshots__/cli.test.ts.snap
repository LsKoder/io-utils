// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CLI should generate AdditionalPropsTest.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import * as t from \\"io-ts\\";

// additional attributes

export const AdditionalPropsTest = t.dictionary(
  t.string,

  t.readonlyArray(t.number, \\"array of number\\"),

  \\"AdditionalPropsTest\\"
);

export type AdditionalPropsTest = t.TypeOf<typeof AdditionalPropsTest>;
"
`;

exports[`CLI should generate AdditionalPropsTrueTest.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import * as t from \\"io-ts\\";

// additional attributes

export const AdditionalPropsTrueTest = t.dictionary(
  t.string,
  t.any,
  \\"AdditionalPropsTrueTest\\"
);

export type AdditionalPropsTrueTest = t.TypeOf<typeof AdditionalPropsTrueTest>;
"
`;

exports[`CLI should generate AdditionalpropsDefault.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import * as t from \\"io-ts\\";
import { withDefault } from \\"italia-ts-commons/lib/types\\";

type AdditionalpropsDefaultBase = t.TypeOf<typeof AdditionalpropsDefaultBase>;
const AdditionalpropsDefaultBase = t.dictionary(
  t.string,

  t.readonlyArray(t.number, \\"array of number\\"),

  \\"AdditionalpropsDefault\\"
);

// additional attributes

export const AdditionalpropsDefault = withDefault(AdditionalpropsDefaultBase, {
  test: [1000]
} as AdditionalpropsDefaultBase);

export type AdditionalpropsDefault = t.TypeOf<typeof AdditionalpropsDefault>;
"
`;

exports[`CLI should generate AllOfOneOfTest.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import * as t from \\"io-ts\\";
import { Message } from \\"./Message\\";
import { PaginationResponse } from \\"./PaginationResponse\\";

/**
 * test if we can use allOf as oneOf
 */

// required attributes
const AllOfOneOfTest1R = t.interface({});

// optional attributes
const AllOfOneOfTest1O = t.partial({
  items: t.readonlyArray(Message, \\"array of Message\\")
});

export const AllOfOneOfTest1 = t.exact(
  t.intersection([AllOfOneOfTest1R, AllOfOneOfTest1O], \\"AllOfOneOfTest1\\")
);

export type AllOfOneOfTest1 = t.TypeOf<typeof AllOfOneOfTest1>;

export const AllOfOneOfTest = t.union(
  [AllOfOneOfTest1, PaginationResponse],
  \\"AllOfOneOfTest\\"
);

export type AllOfOneOfTest = t.TypeOf<typeof AllOfOneOfTest>;
"
`;

exports[`CLI should generate AllOfTest.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import * as t from \\"io-ts\\";
import { Message } from \\"./Message\\";
import { PaginationResponse } from \\"./PaginationResponse\\";

// required attributes
const AllOfTest1R = t.interface({});

// optional attributes
const AllOfTest1O = t.partial({
  items: t.readonlyArray(Message, \\"array of Message\\")
});

export const AllOfTest1 = t.exact(
  t.intersection([AllOfTest1R, AllOfTest1O], \\"AllOfTest1\\")
);

export type AllOfTest1 = t.TypeOf<typeof AllOfTest1>;

export const AllOfTest = t.intersection(
  [AllOfTest1, PaginationResponse],
  \\"AllOfTest\\"
);

export type AllOfTest = t.TypeOf<typeof AllOfTest>;
"
`;

exports[`CLI should generate CreatedMessageWithContent.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import { FiscalCode } from \\"./FiscalCode\\";
import { MessageContent } from \\"./MessageContent\\";
import { withDefault } from \\"italia-ts-commons/lib/types\\";
import * as t from \\"io-ts\\";
import { WithinRangeInteger } from \\"italia-ts-commons/lib/numbers\\";

type TimeToLiveBase = t.TypeOf<typeof TimeToLiveBase>;
const TimeToLiveBase = WithinRangeInteger(3600, 604800);

// required attributes
const CreatedMessageWithContentR = t.interface({
  fiscal_code: FiscalCode,

  sender_service_id: t.string
});

// optional attributes
const CreatedMessageWithContentO = t.partial({
  id: t.string,

  time_to_live: withDefault(TimeToLiveBase, 3600 as TimeToLiveBase),

  content: MessageContent
});

export const CreatedMessageWithContent = t.exact(
  t.intersection(
    [CreatedMessageWithContentR, CreatedMessageWithContentO],
    \\"CreatedMessageWithContent\\"
  )
);

export type CreatedMessageWithContent = t.TypeOf<
  typeof CreatedMessageWithContent
>;
"
`;

exports[`CLI should generate CustomStringFormatTest.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import { SomeCustomStringType as SomeCustomStringTypeT } from \\"italia-ts-commons/lib/string\\";
import * as t from \\"io-ts\\";

export type CustomStringFormatTest = t.TypeOf<typeof CustomStringFormatTest>;
export const CustomStringFormatTest = SomeCustomStringTypeT;
"
`;

exports[`CLI should generate EmailAddress.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import { EmailString } from \\"italia-ts-commons/lib/strings\\";
import * as t from \\"io-ts\\";

export type EmailAddress = t.TypeOf<typeof EmailAddress>;
export const EmailAddress = EmailString;
"
`;

exports[`CLI should generate EnumTest.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import * as t from \\"io-ts\\";
import { enumType } from \\"italia-ts-commons/lib/types\\";

export enum StatusEnum {
  \\"value1\\" = \\"value1\\",

  \\"value2\\" = \\"value2\\",

  \\"value3\\" = \\"value3\\"
}

// required attributes
const EnumTestR = t.interface({});

// optional attributes
const EnumTestO = t.partial({
  status: enumType<StatusEnum>(StatusEnum, \\"status\\")
});

export const EnumTest = t.exact(
  t.intersection([EnumTestR, EnumTestO], \\"EnumTest\\")
);

export type EnumTest = t.TypeOf<typeof EnumTest>;
"
`;

exports[`CLI should generate ExtendedProfile.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import { EmailAddress } from \\"./EmailAddress\\";
import { PreferredLanguages } from \\"./PreferredLanguages\\";
import { IsInboxEnabled } from \\"./IsInboxEnabled\\";
import { IsWebhookEnabled } from \\"./IsWebhookEnabled\\";
import * as t from \\"io-ts\\";

/**
 * Describes the citizen's profile, mostly interesting for preferences attributes.
 */

// required attributes
const ExtendedProfileR = t.interface({});

// optional attributes
const ExtendedProfileO = t.partial({
  email: EmailAddress,

  preferred_languages: PreferredLanguages,

  is_inbox_enabled: IsInboxEnabled,

  is_webhook_enabled: IsWebhookEnabled,

  version: t.Integer
});

export const ExtendedProfile = t.exact(
  t.intersection([ExtendedProfileR, ExtendedProfileO], \\"ExtendedProfile\\")
);

export type ExtendedProfile = t.TypeOf<typeof ExtendedProfile>;
"
`;

exports[`CLI should generate FiscalCode.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import { PatternString } from \\"italia-ts-commons/lib/strings\\";
import * as t from \\"io-ts\\";

/**
 * User's fiscal code.
 */

export type FiscalCode = t.TypeOf<typeof FiscalCode>;
export const FiscalCode = PatternString(
  \\"^[A-Z]{6}[0-9LMNPQRSTUV]{2}[ABCDEHLMPRST][0-9LMNPQRSTUV]{2}[A-Z][0-9LMNPQRSTUV]{3}[A-Z]$\\"
);
"
`;

exports[`CLI should generate InlinePropertyTest.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import * as t from \\"io-ts\\";
import { PatternString } from \\"italia-ts-commons/lib/strings\\";

// required attributes
const InlinePropertyTestR = t.interface({});

// optional attributes
const InlinePropertyTestO = t.partial({
  inlineProp: PatternString(
    \\"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\\"
  )
});

export const InlinePropertyTest = t.exact(
  t.intersection(
    [InlinePropertyTestR, InlinePropertyTestO],
    \\"InlinePropertyTest\\"
  )
);

export type InlinePropertyTest = t.TypeOf<typeof InlinePropertyTest>;
"
`;

exports[`CLI should generate IsInboxEnabled.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import * as t from \\"io-ts\\";
import { withDefault } from \\"italia-ts-commons/lib/types\\";

/**
 * True if the recipient of a message wants to store its content for later retrieval.
 */

export type IsInboxEnabled = t.TypeOf<typeof IsInboxEnabledBase>;
const IsInboxEnabledBase = t.boolean;

export const IsInboxEnabled = withDefault(
  IsInboxEnabledBase,
  false as IsInboxEnabled
);
"
`;

exports[`CLI should generate IsWebhookEnabled.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import * as t from \\"io-ts\\";
import { withDefault } from \\"italia-ts-commons/lib/types\\";

/**
 * True if the recipient of a message wants to forward the notifications to the default webhook.
 */

export type IsWebhookEnabled = t.TypeOf<typeof IsWebhookEnabledBase>;
const IsWebhookEnabledBase = t.boolean;

export const IsWebhookEnabled = withDefault(
  IsWebhookEnabledBase,
  false as IsWebhookEnabled
);
"
`;

exports[`CLI should generate LimitedProfile.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import { PreferredLanguages } from \\"./PreferredLanguages\\";
import * as t from \\"io-ts\\";

/**
 * Describes the citizen's profile, mostly interesting for preferences attributes.
 */

// required attributes
const LimitedProfileR = t.interface({});

// optional attributes
const LimitedProfileO = t.partial({
  preferred_languages: PreferredLanguages
});

export const LimitedProfile = t.exact(
  t.intersection([LimitedProfileR, LimitedProfileO], \\"LimitedProfile\\")
);

export type LimitedProfile = t.TypeOf<typeof LimitedProfile>;
"
`;

exports[`CLI should generate Message.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import { MessageContent } from \\"./MessageContent\\";
import * as t from \\"io-ts\\";

// required attributes
const MessageR = t.interface({
  id: t.string,

  content: MessageContent
});

// optional attributes
const MessageO = t.partial({
  sender_service_id: t.string
});

export const Message = t.exact(t.intersection([MessageR, MessageO], \\"Message\\"));

export type Message = t.TypeOf<typeof Message>;
"
`;

exports[`CLI should generate MessageContent.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import * as t from \\"io-ts\\";
import { WithinRangeString } from \\"italia-ts-commons/lib/strings\\";

// required attributes
const MessageContentR = t.interface({
  markdown: WithinRangeString(80, 10001)
});

// optional attributes
const MessageContentO = t.partial({
  subject: WithinRangeString(10, 121)
});

export const MessageContent = t.exact(
  t.intersection([MessageContentR, MessageContentO], \\"MessageContent\\")
);

export type MessageContent = t.TypeOf<typeof MessageContent>;
"
`;

exports[`CLI should generate NestedObjectTest.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import * as t from \\"io-ts\\";
import { PatternString } from \\"italia-ts-commons/lib/strings\\";

// required attributes
const NestedObjectTestNestedObjectR = t.interface({});

// optional attributes
const NestedObjectTestNestedObjectO = t.partial({
  inlineProp: PatternString(
    \\"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\\"
  )
});

export const NestedObjectTestNestedObject = t.exact(
  t.intersection(
    [NestedObjectTestNestedObjectR, NestedObjectTestNestedObjectO],
    \\"NestedObjectTestNestedObject\\"
  )
);

export type NestedObjectTestNestedObject = t.TypeOf<
  typeof NestedObjectTestNestedObject
>;

// required attributes
const NestedObjectTestR = t.interface({});

// optional attributes
const NestedObjectTestO = t.partial({
  inlineProp: PatternString(
    \\"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$\\"
  ),

  nestedObject: NestedObjectTestNestedObject
});

export const NestedObjectTest = t.exact(
  t.intersection([NestedObjectTestR, NestedObjectTestO], \\"NestedObjectTest\\")
);

export type NestedObjectTest = t.TypeOf<typeof NestedObjectTest>;
"
`;

exports[`CLI should generate NonNegativeIntegerTest.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import { NonNegativeInteger } from \\"italia-ts-commons/lib/numbers\\";
import * as t from \\"io-ts\\";

export type NonNegativeIntegerTest = t.TypeOf<typeof NonNegativeIntegerTest>;
export const NonNegativeIntegerTest = NonNegativeInteger;
"
`;

exports[`CLI should generate NonNegativeNumberTest.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import { NonNegativeNumber } from \\"italia-ts-commons/lib/numbers\\";
import * as t from \\"io-ts\\";

export type NonNegativeNumberTest = t.TypeOf<typeof NonNegativeNumberTest>;
export const NonNegativeNumberTest = NonNegativeNumber;
"
`;

exports[`CLI should generate OneOfTest.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import * as t from \\"io-ts\\";

// required attributes
const OneOfTest1R = t.interface({});

// optional attributes
const OneOfTest1O = t.partial({
  limited: t.boolean
});

export const OneOfTest1 = t.exact(
  t.intersection([OneOfTest1R, OneOfTest1O], \\"OneOfTest1\\")
);

export type OneOfTest1 = t.TypeOf<typeof OneOfTest1>;

// required attributes
const OneOfTest2R = t.interface({});

// optional attributes
const OneOfTest2O = t.partial({
  unlimited: t.boolean
});

export const OneOfTest2 = t.exact(
  t.intersection([OneOfTest2R, OneOfTest2O], \\"OneOfTest2\\")
);

export type OneOfTest2 = t.TypeOf<typeof OneOfTest2>;

export const OneOfTest = t.union([OneOfTest1, OneOfTest2], \\"OneOfTest\\");

export type OneOfTest = t.TypeOf<typeof OneOfTest>;
"
`;

exports[`CLI should generate OrganizationFiscalCode.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import { OrganizationFiscalCode as OrganizationFiscalCodeT } from \\"italia-ts-commons/lib/string\\";
import * as t from \\"io-ts\\";

export type OrganizationFiscalCode = t.TypeOf<typeof OrganizationFiscalCode>;
export const OrganizationFiscalCode = OrganizationFiscalCodeT;
"
`;

exports[`CLI should generate OrganizationFiscalCodeTest.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import { OrganizationFiscalCode as OrganizationFiscalCodeT } from \\"italia-ts-commons/lib/string\\";
import * as t from \\"io-ts\\";

export type OrganizationFiscalCodeTest = t.TypeOf<
  typeof OrganizationFiscalCodeTest
>;
export const OrganizationFiscalCodeTest = OrganizationFiscalCodeT;
"
`;

exports[`CLI should generate PaginationResponse.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import * as t from \\"io-ts\\";

/**
 * Pagination response parameters.
 */

// required attributes
const PaginationResponseR = t.interface({});

// optional attributes
const PaginationResponseO = t.partial({
  page_size: t.Integer,

  next: t.string
});

export const PaginationResponse = t.exact(
  t.intersection(
    [PaginationResponseR, PaginationResponseO],
    \\"PaginationResponse\\"
  )
);

export type PaginationResponse = t.TypeOf<typeof PaginationResponse>;
"
`;

exports[`CLI should generate PreferredLanguages.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import * as t from \\"io-ts\\";

/**
 * Indicates the User's preferred written or spoken languages in order of preference. Generally used for selecting a localized User interface. Valid values are concatenation of the ISO 639-1 two letter language code, an underscore, and the ISO 3166-1 2 letter country code; e.g., 'en_US' specifies the language English and country US.
 */

export type PreferredLanguages = t.TypeOf<typeof PreferredLanguages>;
export const PreferredLanguages = t.readonlyArray(t.string, \\"array of string\\");
"
`;

exports[`CLI should generate Profile.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import { EmailAddress } from \\"./EmailAddress\\";
import { FiscalCode } from \\"./FiscalCode\\";
import { IsInboxEnabled } from \\"./IsInboxEnabled\\";
import { IsWebhookEnabled } from \\"./IsWebhookEnabled\\";
import { PreferredLanguages } from \\"./PreferredLanguages\\";
import * as t from \\"io-ts\\";

/**
 * Describes the user's profile.
 */

// required attributes
const ProfilePayloadR = t.interface({});

// optional attributes
const ProfilePayloadO = t.partial({});

export const ProfilePayload = t.exact(
  t.intersection([ProfilePayloadR, ProfilePayloadO], \\"ProfilePayload\\")
);

export type ProfilePayload = t.TypeOf<typeof ProfilePayload>;

// required attributes
const ProfileR = t.interface({
  family_name: t.string,

  fiscal_code: FiscalCode,

  has_profile: t.boolean,

  is_email_set: t.boolean,

  name: t.string,

  version: t.Integer
});

// optional attributes
const ProfileO = t.partial({
  email: EmailAddress,

  is_inbox_enabled: IsInboxEnabled,

  is_webhook_enabled: IsWebhookEnabled,

  preferred_email: EmailAddress,

  preferred_languages: PreferredLanguages,

  payload: ProfilePayload
});

export const Profile = t.exact(t.intersection([ProfileR, ProfileO], \\"Profile\\"));

export type Profile = t.TypeOf<typeof Profile>;
"
`;

exports[`CLI should generate ServicePublic.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import * as t from \\"io-ts\\";
import { NonEmptyString } from \\"italia-ts-commons/lib/strings\\";

/**
 * A Service associated to an user's subscription.
 */

// required attributes
const ServicePublicR = t.interface({
  service_id: NonEmptyString,

  service_name: NonEmptyString,

  organization_name: NonEmptyString,

  department_name: NonEmptyString
});

// optional attributes
const ServicePublicO = t.partial({
  version: t.Integer
});

export const ServicePublic = t.exact(
  t.intersection([ServicePublicR, ServicePublicO], \\"ServicePublic\\")
);

export type ServicePublic = t.TypeOf<typeof ServicePublic>;
"
`;

exports[`CLI should generate WithinRangeIntegerTest.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import { WithinRangeInteger } from \\"italia-ts-commons/lib/numbers\\";
import * as t from \\"io-ts\\";

export type WithinRangeIntegerTest = t.TypeOf<typeof WithinRangeIntegerTest>;
export const WithinRangeIntegerTest = WithinRangeInteger(0, 10);
"
`;

exports[`CLI should generate WithinRangeNumberTest.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import { WithinRangeNumber } from \\"italia-ts-commons/lib/numbers\\";
import * as t from \\"io-ts\\";

export type WithinRangeNumberTest = t.TypeOf<typeof WithinRangeNumberTest>;
export const WithinRangeNumberTest = WithinRangeNumber(0, 10);
"
`;

exports[`CLI should generate WithinRangeStringTest.ts as in snapshot 1`] = `
"/**
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import { WithinRangeString } from \\"italia-ts-commons/lib/strings\\";
import * as t from \\"io-ts\\";

export type WithinRangeStringTest = t.TypeOf<typeof WithinRangeStringTest>;
export const WithinRangeStringTest = WithinRangeString(10, 11);
"
`;
