{%- import "macros.njk" as macro -%}

/** 
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import {
  ApiHeaderJson,
  RequestParams,
  TypeofApiCall,
  composeHeaderProducers,
  createFetchRequestForApi,
  RequestHeaderProducer,
  RequestHeaderKey,
  ReplaceRequestParams
} from "italia-ts-commons/lib/requests";

{% if operations | length %}
import {
{% for operation in operations %}
  {{ macro.requestTypeName(operation) }},
  {{ macro.responseDecoderName(operation) }},
{% endfor %}
} from "./requestTypes";
{% endif%}


interface PreOp<K = undefined> {
  {% for operation in operations %}
    (op: TypeofApiCall<{{ macro.requestTypeName(operation) }}>): K extends string
      ? TypeofApiCall<
          ReplaceRequestParams<{{ macro.requestTypeName(operation) }}, Omit<RequestParams<{{ macro.requestTypeName(operation) }}>, K>>
        > 
      : TypeofApiCall<{{ macro.requestTypeName(operation) }}>;
  {% endfor %}
}

{% for operation in operations %}
    function noOp(op: TypeofApiCall<{{ macro.requestTypeName(operation) }}>): TypeofApiCall<{{ macro.requestTypeName(operation) }}>;
{% endfor %}
function noOp(
  op: 
  {% for operation in operations %}
    {{ "|" if loop.index0 else "" }} TypeofApiCall<{{ macro.requestTypeName(operation) }}>
  {% endfor %}
) {
  return op;
}

export type Client<K = undefined> = K extends string
  ? {
    {% for operation in operations %}
    {{ operation.operationId }}: TypeofApiCall<
        ReplaceRequestParams<{{ macro.requestTypeName(operation) }}, Omit<RequestParams<{{ macro.requestTypeName(operation) }}>, K>>
      >;
    {% endfor %}
    }
  : {
    {% for operation in operations %}
    {{ operation.operationId }}: TypeofApiCall<{{ macro.requestTypeName(operation) }}>;
    {% endfor %}
  };

export function createClient(params: {
  baseUrl: string;
  fetchApi: typeof fetch;
  basePath?: string;
}): Client;
export function createClient<K>(params: {
  baseUrl: string;
  fetchApi: typeof fetch;
  basePath?: string;
  transformEach: PreOp<K>;
}): Client<K>;
export function createClient<K>({
  baseUrl,
  transformEach,
  fetchApi,
  basePath = "/api/v1",
}: {
  baseUrl: string;
  fetchApi: typeof fetch;
  basePath?: string;
  transformEach?: PreOp<K>;
}) {

  const options = {
    baseUrl,
    fetchApi
  };

  {% for operation in operations %}
  {% set headerParams = operation.parameters | paramIn("header") %}
  {% set bodyParams = operation.parameters | paramIn("body") %}
  {% set queryParams = operation.parameters | paramIn("query") %}
  {% set pathParams = operation.parameters | paramIn("path") %}
  {% set formParams = operation.parameters | paramIn("formData") %}

  const {{ operation.operationId }}T: {{ macro.requestParamsType(operation) }} = {
    method: "{{ operation.method }}",
    {% if headerParams | length or operation.consumes %}
    headers: {{ macro.composedHeaderProducers(headerParams, operation.consumes) }},
    {% else %}
    headers: () => ({}),
    {% endif %}
    response_decoder: {{ macro.responseDecoderName(operation) }}(),
    url: ({ {{ pathParams | pick("name") | stripQuestionMark | join(', ') }} }) => `{{ macro.$("basePath") }}{{ macro.pathStringToTemplateString(operation.path) }}`,
    {% if bodyParams | length %}
    body: ({ {{ bodyParams | pick("name") | stripQuestionMark | join(", ") }} }) => JSON.stringify({{ bodyParams | pick("name") | stripQuestionMark | join(", ") }}),
    {% elif formParams | length %}
    body: ({ {{ formParams | pick("name") | stripQuestionMark | join(", ") }} }) => {{ formParams | pick("name") | first }}.uri,
    {% elif operation.method === "post" %}
    body: () => "{}",
    {% endif %}
    {% if queryParams | length %}
    query: ({ {{ queryParams | pick("name") | stripQuestionMark | join(', ') }} }) => ({ {{ queryParams | pick("name") | stripQuestionMark | join(", ") }} }),
    {% else %}
    query: () => ({}),
    {% endif %}
  };
  const {{ operation.operationId }} = createFetchRequestForApi({{ operation.operationId }}T, options);
  {% endfor %}

  return {
    {% for operation in operations %}{{ operation.operationId }}: (transformEach || noOp)({{ operation.operationId }}),{% endfor %}
  };
}

  