{%- import "macros.njk" as macro -%}

/** 
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import {
  ApiHeaderJson,
  RequestParams,
  TypeofApiCall,
  composeHeaderProducers,
  createFetchRequestForApi,
  RequestHeaderProducer,
  RequestHeaderKey
} from "italia-ts-commons/lib/requests";

{% if operations | length %}
import {
{% for operation in operations %}
  {{ macro.requestTypeName(operation) }},
  {{ macro.responseDecoderName(operation) }},
{% endfor %}
} from "./requestTypes";
{% endif%}

{% set moduleName = "Client" %}

export function {{ moduleName }}(
  baseUrl: string,
  // tslint:disable-next-line:no-any
  fetchApi: typeof fetch,
  customHeaderProducer?: RequestHeaderProducer<any, RequestHeaderKey>
): {
  {% for operation in operations %} readonly {{ operation.operationId }}: TypeofApiCall<typeof {{ operation.operationId }}T>;{% endfor %}
} {
  const options = {
    baseUrl,
    fetchApi
  };

  {% for operation in operations %}
  const {{ operation.operationId }}T: RequestParams<{{ macro.requestTypeName(operation) }}> = {
    method: "{{ operation.method }}",
    headers: customHeaderProducer ? composeHeaderProducers(ApiHeaderJson, customHeaderProducer) : ApiHeaderJson,
    response_decoder: {{ macro.responseDecoderName(operation) }}(),
    url: {{ operation.pathParams | toFnArgs }} => {{ macro.pathStringToTemplateString(operation.path) }},
    {% if operation.bodyParams | keys | length %}
    body: {{ operation.bodyParams | toFnArgs }} => JSON.stringify({{ operation.bodyParams | keys | first }}),
    {% endif %}
    {% if operation.queryParams | keys | length %}
    query: {{ operation.queryParams | toFnArgs }} => ({ {{ operation.queryParams | keys | join(", ") }} }),
    {% endif %}
    {% if operation.formParams | keys | length %}
    formData: {{ operation.formParams | toFnArgs }} => ({ {{ operation.formParams | keys | join(", ") }} }),
    {% endif %}
  };
  const {{ operation.operationId }} = createFetchRequestForApi({{ operation.operationId }}T, options);
  {% endfor %}

  return {
    {% for operation in operations %}{{ operation.operationId }},{% endfor %}
  };
}

export type {{ moduleName }} = typeof {{ moduleName }};
  