{%- import "macros.njk" as macro -%}

/** 
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import {
  ApiHeaderJson,
  RequestParams,
  TypeofApiCall,
  composeHeaderProducers,
  createFetchRequestForApi,
  RequestHeaderProducer,
  RequestHeaderKey,
  ReplaceRequestParams
} from "italia-ts-commons/lib/requests";

{% if operations | length %}
import {
{% for operation in operations %}
  {{ macro.requestTypeName(operation) }},
  {{ macro.responseDecoderName(operation) }},
{% endfor %}
} from "./requestTypes";
{% endif%}


/**
 * Defines an adapter for TypeofApiCall which omit one or more parameters in the signature
 * @param ApiT the type which defines the operation to expose
 * @param K the parameter to omit. undefined means no parameters will be omitted
 */
export type OmitApiCallParams<ApiT, K = undefined> = (
  op: TypeofApiCall<ApiT>
) => K extends string
  ? TypeofApiCall<ReplaceRequestParams<ApiT, Omit<RequestParams<ApiT>, K>>>
  : TypeofApiCall<ApiT>;

/**
 * Defines an adapter for TypeofApiCall which omit one or more parameters in the signature
 * @param ApiT the type which defines the operation to expose
 * @param K the parameter to omit. undefined means no parameters will be omitted
 */
export type DefaultTransformEach<K = undefined> = OmitApiCallParams<{% for operation in operations %}{{ " | " if loop.index0 else "" }}{{ macro.requestTypeName(operation) }}{% endfor %}, K>

/**
 * Defines a collection of api operations 
 * @param K name of the parameters that the Clients masks from the operations
 */
export type Client<K extends string = ""> = {
{% for operation in operations %}
  readonly {{ operation.operationId}}: TypeofApiCall<
    ReplaceRequestParams<{{ macro.requestTypeName(operation) }}, Omit<RequestParams<{{ macro.requestTypeName(operation) }}>, K>>
  >;
{% endfor %}
};


/**
 * Identity function for OmitApiCallParams.
 * @param op the operation to be wrapped
 */
const noTransform: DefaultTransformEach = (
  operation: {% for operation in operations %}{% if loop.index0 %}{% raw %} & {% endraw %}{% endif %}TypeofApiCall<{{ macro.requestTypeName(operation) }}>{% endfor %}
) => operation;



/**
 * Create an instance of a client
 * @param params hash map of parameters thata define the client:
 *  - baseUrl: the base url for every api call (required)
 *  - fetchApi: an implementation of the fetch() web API, depending on the platform (required)
 *  - basePath: optional path to be appended to the baseUrl
 *  - transformEach: optional adapter to be applied to every operation, to omit some paramenters
 * @returns a collection of api operations
 */
export function createClient<K extends string>(params: {
  baseUrl: string;
  // tslint:disable-next-line:no-any
  fetchApi: typeof fetch;
  transformEach: {% for operation in operations %}{% if loop.index0 %}{% raw %} & {% endraw %}{% endif %}OmitApiCallParams<{{ macro.requestTypeName(operation) }}, K>{% endfor %}
  basePath?: string;
}): Client<K>;
export function createClient(params: {
  baseUrl: string;
  // tslint:disable-next-line:no-any
  fetchApi: typeof fetch;
  transformEach?: undefined;
  basePath?: string;
}): Client;
export function createClient<K extends string>({
  baseUrl,
  // tslint:disable-next-line:no-any
  fetchApi,
  transformEach,
  basePath = "/api/v1",
}: {
  baseUrl: string;
  // tslint:disable-next-line:no-any
  fetchApi: typeof fetch;
  transformEach?: K extends ""
    ? undefined
    : {% for operation in operations %}{% if loop.index0 %}{% raw %} & {% endraw %}{% endif %}OmitApiCallParams<{{ macro.requestTypeName(operation) }}, K>{% endfor %}

  basePath?: string;
}) {
  const options = {
    baseUrl,
    fetchApi,
  };


  {% for operation in operations %}
  {% set headerParams = operation.parameters | paramIn("header") %}
  {% set bodyParams = operation.parameters | paramIn("body") %}
  {% set queryParams = operation.parameters | paramIn("query") %}
  {% set pathParams = operation.parameters | paramIn("path") %}
  {% set formParams = operation.parameters | paramIn("formData") %}

  const {{ operation.operationId }}T: {{ macro.requestParamsType(operation) }} = {
    method: "{{ operation.method }}",
    {% if headerParams | length or operation.consumes %}
    headers: {{ macro.composedHeaderProducers(headerParams, operation.consumes) }},
    {% else %}
    headers: () => ({}),
    {% endif %}
    response_decoder: {{ macro.responseDecoderName(operation) }}(),
    url: ({ {{ pathParams | pick("name") | stripQuestionMark | join(', ') }} }) => `{{ macro.$("basePath") }}{{ macro.pathStringToTemplateString(operation.path) }}`,
    {% if bodyParams | length %}
    body: ({ {{ bodyParams | pick("name") | stripQuestionMark | join(", ") }} }) => JSON.stringify({{ bodyParams | pick("name") | stripQuestionMark | join(", ") }}),
    {% elif formParams | length %}
    body: ({ {{ formParams | pick("name") | stripQuestionMark | join(", ") }} }) => {{ formParams | pick("name") | first }}.uri,
    {% elif operation.method === "post" %}
    body: () => "{}",
    {% endif %}
    {% if queryParams | length %}
    query: ({ {{ queryParams | pick("name") | stripQuestionMark | join(', ') }} }) => ({ {{ queryParams | pick("name") | stripQuestionMark | join(", ") }} }),
    {% else %}
    query: () => ({}),
    {% endif %}
  };
  const {{ operation.operationId }} = (transformEach || noTransform)(createFetchRequestForApi({{ operation.operationId }}T, options));
  {% endfor %}

  return {
    {% for operation in operations %}{{ operation.operationId }},{% endfor %}
  };
}

  