{%- import "macros.njk" as macro -%}

/** 
 * Do not edit this file it is auto-generated by italia-utils / gen-api-models.
 * See https://github.com/teamdigitale/italia-utils
 */
/* tslint:disable */

import {
  ApiHeaderJson,
  RequestParams,
  TypeofApiCall,
  composeHeaderProducers,
  createFetchRequestForApi,
  RequestHeaderProducer,
  RequestHeaderKey,
  ReplaceRequestParams
} from "italia-ts-commons/lib/requests";

{% if operations | length %}
import {
{% for operation in operations %}
  {{ macro.requestTypeName(operation) }},
  {{ macro.responseDecoderName(operation) }},
{% endfor %}
} from "./requestTypes";
{% endif%}

{% set moduleName = "Client" %}

export function {{ moduleName }}(
  baseUrl: string,
  // tslint:disable-next-line:no-any
  fetchApi: typeof fetch,
  basePath: string = "{{ spec.basePath }}"
): {
  {% for operation in operations %} readonly {{ operation.operationId }}: TypeofApiCall<{{ macro.requestParamsType(operation) }}>;{% endfor %}
} {
  const options = {
    baseUrl,
    fetchApi
  };


  {% for operation in operations %}
  {% set headerParams = operation.parameters | paramIn("header") %}
  {% set bodyParams = operation.parameters | paramIn("body") %}
  {% set queryParams = operation.parameters | paramIn("query") %}
  {% set pathParams = operation.parameters | paramIn("path") %}
  {% set formParams = operation.parameters | paramIn("formData") %}

  const {{ operation.operationId }}T: {{ macro.requestParamsType(operation) }} = {
    method: "{{ operation.method }}",
    {% if headerParams | length or operation.consumes %}
    headers: {{ macro.composedHeaderProducers(headerParams, operation.consumes) }},
    {% else %}
    headers: () => ({}),
    {% endif %}
    response_decoder: {{ macro.responseDecoderName(operation) }}(),
    url: ({ {{ pathParams | pick("name") | stripQuestionMark | join(', ') }} }) => `{{ macro.$("basePath") }}{{ macro.pathStringToTemplateString(operation.path) }}`,
    {% if bodyParams | length %}
    body: ({ {{ bodyParams | pick("name") | stripQuestionMark | join(", ") }} }) => JSON.stringify({{ bodyParams | pick("name") | stripQuestionMark | join(", ") }}),
    {% elif formParams | length %}
    body: ({ {{ formParams | pick("name") | stripQuestionMark | join(", ") }} }) => {{ formParams | pick("name") | first }}.uri,
    {% elif operation.method === "post" %}
    body: () => "{}",
    {% endif %}
    {% if queryParams | length %}
    query: ({ {{ queryParams | pick("name") | stripQuestionMark | join(', ') }} }) => ({ {{ queryParams | pick("name") | stripQuestionMark | join(", ") }} }),
    {% else %}
    query: () => ({}),
    {% endif %}
  };
  const {{ operation.operationId }} = createFetchRequestForApi({{ operation.operationId }}T, options);
  {% endfor %}

  return {
    {% for operation in operations %}{{ operation.operationId }},{% endfor %}
  };
}

export type {{ moduleName }} = typeof {{ moduleName }};
  